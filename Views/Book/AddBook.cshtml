@model BookStore.BookModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "AddBook";
}

@*Form doesn't need a target if its hitting an action method with the same name
    used to create it. Otherwise use asp-controller and asp-action...
    Input type and id are generated automatically based on the model attribute being
    targeted.
    *@

<div class="container">
    <h3 class="display-4">Add a new book</h3>
    <hr />
    @if (ViewBag.isSuccessful)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Success!</strong> Your book has been added to the database.
            Click <a asp-controller="Book" asp-action="GetBook" asp-route-id="@ViewBag.bookId">here</a> to view the details
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <form method="post">
        <div class="form-group">
            <label asp-for="Title"></label>
            <input asp-for="Title" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="Author"></label>
            <input asp-for="Author" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="Pages"></label>
            <input asp-for="Pages" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="Description"></label>
            <textarea asp-for="Description" class="form-control"></textarea>
        </div>
        <div class="form-group">
            <input type="submit" value="Add book" class="btn btn-primary" />
        </div>
    </form>
</div>


